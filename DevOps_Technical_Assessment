Setup following web application deployment: NGINX as reverse proxy for
uWSGI app server, PostgreSQL and Django on Ubuntu 
1.	 First start with the updating packages that are already available on server. So that server will be up to date. For this:
$ sudo apt-get update
$ sudo apt-get upgrade
2.	Now, install PostgreSQL and its required package.

$ sudo apt-get install postgresql postgresql-contrib	
create a database user and database for our Django application. For this first login as a postgres user, as by default only this user has privileges to create database in PostgreSQL.

 $ sudo su â€“ postgres
Now, you are logged in as postgres user. create database user and assign necessary privileges to it.

postgres@ubuntu:~$ createuser --interactive -P
Enter name of role to add: db_user
Enter password for new role: 
Enter it again: 
Shall the new role be a superuser? (y/n) n
Shall the new role be allowed to create databases? (y/n) n
Shall the new role be allowed to create more new roles? (y/n) n
postgres@ubuntu:~$

In above example, database user name is db_user. You can give the name as per your wish. Create database now. Give a appropraite name to database as well, as per your Django application

postgres@ubuntu:~$ createdb --owner db_user django_db

here db_user is a databse user and django_db is a database name. Now logout from postgres user.

postgres@ubuntu:~$ logout
3.	 Till now our database setup is done. Now create a virtual environment for our Django application. For this we need to install, virtualenv package.

$ sudo apt-get install python-virtualenv


Now create a virtual environment.
Note: I am going to keep my django application in default folder that is /home/ubuntu/, So I will create my virtual environment here. If you want to keep your application in some other directory like /var/www/ then change your directory accordingly.

$ virtualenv -p python3 django_env
New python executable in django_env/bin/python
Installing distribute..............done.
Installing pip.....................done.

Here djano_env is the virtual environment name. Change it as per you, if required. To activate this environment, run

$ source django_env/bin/activate
(django_env) $

Now, install all the requirements of your project here, including django. Like:

(django_env) $ pip install django
Downloading/unpacking django(...)
Installing collected packages: django(...)
Successfully installed django
Cleaning up...

4.	Now, clone your project directory, if you have already created project. Here I am creating a sample project for demo.

(django_env) $ django-admin.py startproject django_project

Here project name is django_project. Now check whether all your project requirement is setup or not by running it on development server. For this first navigate into your project and run the server.




(django_env) $ cd django_project
(django_env) $ python manage.py runserver 0.0.0.0:8000
Validating models...
0 errors found
Django version 1.10.1, using settings 'hello.settings'
Jan 09, 2017 - 06:12:00
Development server is running at 0.0.0.0:8000/
Quit the server with CONTROL-C.

Our project is running on Server's IP with port 8000. Now quit the server by pressing CONTROL-C.
5.	Now, we need to configure PostgreSQL so that it can communicate with our Django application. For this, install psycopg2 database adapter. But this adapter has some package dependencies, so first install them.

(django_env) $ sudo apt-get install libpq-dev python3-dev

Now install,
 
(django_env) $ pip install psycopg2
Now, configure database section in your project's settings.py file.

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'django_db',
        'USER': 'db_user',
        'PASSWORD': '<password you entered when creating db_user>',
        'HOST': 'localhost',
        'PORT': ' 5432',    # Set to empty string for default.
    }
}

Also add, your server's IP or domain name in settings.py as follow:

ALLOWED_HOSTS = ['www.mysite.com'] # your server's IP or domain name

Without above setting, Django will not be accessible from your domain name or IP address. This is the security feature of Django.

Now, migrate the database

(django_env) $ python manage.py migrate

Now our database setup is fully done.

6.	Create directories for your static and media files 

mkdir -p /home/ubuntu/static /home/ubuntu/media
sudo chown www-data.www-data /home/ubuntu/media

and set paths on settings.py files

STATIC_ROOT = '/home/ubuntu/static'
MEDIA_ROOT = '/home/ubuntu/media'

7.	Collect static files

Python manage.py collectstatic
8.	Install required packages using apt

sudo apt install nginx uwsgi uwsgi-plugin-python3
9.	Configure uWSGI to host your Django project Create a file named django.ini in the /etc/uwsgi/apps-enabled/ directory. The content of the file should be something like this:

[uwsgi]
chdir = /home/ubuntu/django_project # customize with your django installation directory
env = DJANGO_SETTINGS_MODULE=project.settings # customize with your settings module
wsgi-file = django_project/wsgi.py # customize with the relative path to your wsgi.py file
workers = 1

Restart uWSGI with:

service uwsgi restart
10.	Configure NGINX to serve your application Create a file named django in the /etc/nginx/sites-enabled/ directory. The content of the file should be something like this:

server {
    listen 80;
    server_name www.mysite.com; # customize with your domain name
    location / {
        # django running in uWSGI
        uwsgi_pass unix:///run/uwsgi/app/django/socket;
        include uwsgi_params;
        uwsgi_read_timeout 300s;
        client_max_body_size 32m;
    }
    location /static/ {
       # static files
       alias /home/ubuntu/static/; # ending slash is required
    }
    location /media/ {
        # media files, uploaded by users
        alias /home/ubuntu/media/; # ending slash is required
    }
}

Restart NGINX with:

service nginx restart
Done!
